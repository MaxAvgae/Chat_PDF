import streamlit as st
import os
import json
from data_preprocessing import prepare_vectorstore, load_existing_vectorstore, get_available_collections
from langchain_chroma import Chroma
from agent import create_agent

st.set_page_config(page_title="üìö RAG Agent", page_icon="ü§ñ")
st.title("üìö RAG-–∞–≥–µ–Ω—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")

persist_dir = "chroma_db"
collection_name = "statistics"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
uploaded_dir = "uploaded_files"
if not os.path.exists(uploaded_dir):
    os.makedirs(uploaded_dir)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(persist_dir):
    os.makedirs(persist_dir)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
if "agent" not in st.session_state:
    st.session_state["agent"] = None
if "current_collection" not in st.session_state:
    st.session_state["current_collection"] = None

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π
with st.sidebar:
    st.header("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–∞–º–∏ –∑–Ω–∞–Ω–∏–π")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    available_collections = get_available_collections(persist_dir)
    
    if available_collections:
        st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
        for collection in available_collections:
            col1, col2 = st.columns([3, 1])
            with col1:
                st.write(f"‚Ä¢ {collection}")
            with col2:
                if st.button("–í—ã–±—Ä–∞—Ç—å", key=f"select_{collection}"):
                    st.session_state["current_collection"] = collection
                    st.session_state["agent"] = None  # –°–±—Ä–æ—Å –∞–≥–µ–Ω—Ç–∞
                    st.rerun()
        
        st.divider()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
    new_collection_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:", value="new_collection")
    
    if st.button("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é"):
        if new_collection_name and new_collection_name not in available_collections:
            st.session_state["current_collection"] = new_collection_name
            st.session_state["agent"] = None
            st.success(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {new_collection_name}")
            st.rerun()
        else:
            st.error("–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if st.session_state["current_collection"]:
    st.subheader(f"üìö –†–∞–±–æ—Ç–∞ —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π: {st.session_state['current_collection']}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ PDF —Ñ–∞–π–ª—ã", type="pdf", accept_multiple_files=True)
    
    if uploaded_files:
        file_paths = []
        for uploaded_file in uploaded_files:
            path = os.path.join(uploaded_dir, uploaded_file.name)
            with open(path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            file_paths.append(path)

        st.success(f"–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {[os.path.basename(p) for p in file_paths]}")

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        if st.button("–°–æ–∑–¥–∞—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î"):
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã..."):
                try:
                    vectorstore, documents = prepare_vectorstore(
                        file_paths, 
                        persist_dir, 
                        st.session_state["current_collection"]
                    )
                    st.success("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ")
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                    retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 5})
                    st.session_state["agent"] = create_agent(retriever)
                    
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"):
        try:
            vectorstore = load_existing_vectorstore(persist_dir, st.session_state["current_collection"])
            if vectorstore:
                retriever = vectorstore.as_retriever(search_type="similarity", search_kwargs={"k": 5})
                st.session_state["agent"] = create_agent(retriever)
                st.success("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ‚úÖ")
            else:
                st.warning("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º
if st.session_state["agent"]:
    st.subheader("üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É")
    user_input = st.chat_input("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å...")
    
    if user_input:
        try:
            result = st.session_state["agent"].invoke({"messages": [{"role": "user", "content": user_input}]})
            answer = result["messages"][-1].content
            with st.chat_message("assistant"):
                st.markdown(answer)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
else:
    st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
